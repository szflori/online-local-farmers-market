// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  FARMER
  ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders   Order[]
  products Product[]
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  farmer    User        @relation(fields: [farmerId], references: [id])
  farmerId  String      @db.ObjectId
  OrderItem OrderItem[]
}

// TODO CHECK CORRECT SCHEMA
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
}
